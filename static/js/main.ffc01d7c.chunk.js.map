{"version":3,"sources":["api/Unsplash.js","components/SearchBox.js","components/ImageCard.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBox","state","term","onFormSubmit","event","preventDefault","_this","props","onSubmit","_this2","this","react_default","a","createElement","className","action","type","placeholder","value","onChange","e","setState","target","Component","ImageCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","React","createRef","addEventListener","_this$props$image","image","description","urls","style","gridRowEnd","concat","ref","alt","src","regular","ImageList","images","map","components_ImageCard","key","id","App","onSearchSubmit","_callee","response","regenerator_default","wrap","_context","prev","next","Unsplash","get","params","query","sent","data","results","stop","src_components_SearchBox","src_components_ImageList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ffc01d7c.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n  baseURL: 'https://api.unsplash.com/',\n  headers: {\n    Authorization: 'Client-ID 8db61e27dc73b74946a2062209f4796f4295d3cab02a83373d50dc282af5f931'\n  }\n})\n","import React, { Component } from 'react'\nimport './SearchBox.css'\n\nclass SearchBox extends Component {\n  state = {\n    term: ''\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault() // to prevent the webpage to refresh after pressing 'enter'\n    this.props.onSubmit(this.state.term)\n  }\n\n  render () {\n    return (\n      <div className='head ui container'>\n        <h1>Photo Galleries made by L'Americain using React.js</h1>\n        <form onSubmit={this.onFormSubmit} action='ui form'>  \n          <div className='ui search'>\n            <div className='ui icon input search-box'>\n              <input \n                type='text' \n                placeholder='Search photos...' \n                value={this.state.term}\n                onChange={(e) => this.setState({ term: e.target.value })}\n              />\n              <i className='search icon' />\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SearchBox\n","import React, { Component } from 'react'\n\nclass ImageCard extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      spans: 0\n    }\n    this.imageRef = React.createRef()\n  }\n\n  componentDidMount () {\n    this.imageRef.current.addEventListener('load', this.setSpans)\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight\n    const spans = Math.ceil(height / 10)\n    this.setState({ spans })\n  }\n\n  render () {\n    const {description, urls} = this.props.image\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\n        <img\n          ref={this.imageRef}\n          alt={description}\n          src={urls.regular}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ImageCard\n","\nimport React from 'react'\nimport './ImageList.css'\nimport ImageCard from './ImageCard'\n\nconst ImageList = (props) => {\n  const images = props.images.map((image) => {\n    return (\n      <ImageCard key={image.id} image={image} />\n    )\n  })\n  return (\n    <div className='image-list'>{images}</div>\n  )\n}\n\nexport default ImageList\n","import React, { Component } from 'react'\nimport Unsplash from './api/Unsplash';\nimport SearchBox from './components/SearchBox'\nimport ImageList from './components/ImageList'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    images: []\n  }\n\n  onSearchSubmit = async (term) => {\n    const response = await Unsplash.get('/search/photos', {\n      params: {\n        query: term\n      },\n    })\n    this.setState({ images: response.data.results })\n  }\n\n  render () {\n    return (\n      <div>\n        <div className='head-back'>\n          <SearchBox onSubmit={this.onSearchSubmit} />\n        </div>\n        <div className=\"ui container\">\n          <ImageList images={this.state.images} />\n        </div>\n        \n      </div>\n      \n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}